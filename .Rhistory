getwd()
setwd("C:/Users/Juan Cortez/Documents/Taller econometría aplicada/Econometría Aplicada UTEM/Econometría Aplicada 1sem 2021/Clases/Clase 3")
isup<-read.table("ISUP.txt", header = FALSE)
install.packages("formattable")
library(formattable)
isup<-formattable(isup, digits=15, format = "formatC")
names(isup)<-c("año", "mes", "isup")
isup
head(isup)
tail(isup)
isup.ts<-ts(isup[3], start = c(1991,1),frequency = 12)
plot(isup.ts)
plot(isup.ts, bty="n", ylab="Índice", xlab="año", lwd=1,
type="l", main="Índice de Supermercados", col="blue")
legend("bottomright", legend = "Isup", lwd=2,
col="blue", bty = "n", text.font = 2)
install.packages("forecast")
library(forecast)
ggseasonplot(window(isup.ts, start=c(2000,1),end=c(2019,12)),
year.labels = F, ylab="Índice",
continuous = T, main="Isup por año", cex.main=1 )
seasonplot(isup.ts)
ggsubseriesplot(window(isup.ts, start=c(2000,1),end=c(2019,12)),
year.labels = F, ylab="Índice",
continuous = T, main="Isup por año", cex.main=1)
#cargar archivos excel
install.packages("readxl")
library(readxl)
data<-read_excel("IMACEC.xlsx",sheet = "Hoja1", col_types = "numeric")
head(data)
imacec.ts<-ts(data[2], start = c(2014,1), frequency=12)
plot(imacec.ts, col="blue")
install.packages("xts")
library(xts)
imacec.ts2 <- as.xts(window(imacec.ts, start=c(2017,1),
end=c(2018,9)), format= "%b-%Y")
plot(imacec.ts2, grid.ticks.on = "years", grid.ticks.lwd = 0,
lend = 1, up.col=NULL, dn.col = NULL, grid.col = "gray",
yaxis.left = T, yaxis.right = F, labels.col = "#333333",
format.labels = T, grid2 = "#F5F5F5", bty="n", type = "h",
col= "blue", main = "IMACEC: Tasa de crecimiento interanual",
ylab="Índice", xlab="", at="pretty")
pib.min<-read_excel("PIB minero base2003.xlsx",sheet = "pibmin",
col_types = "numeric")
head(pib.min)
pib.min.ts<-ts(pib.min[,2:4], start = c(2003,1), frequency=4)
par(mfrow=c(1,2))
{plot(as.xts(pib.min.ts[,1:2],format= "%b-%Y" ),
grid.ticks.on = "years", grid.ticks.lwd = 0,
lend = 1, up.col=NULL, dn.col = NULL, grid.col = "gray",
yaxis.left = T, yaxis.right = F, labels.col = "#333333",
format.labels = T, grid2 = "#F5F5F5", bty="n", type = "l",
col= c("blue", "red"), main = "PIB Minero nominal vs real",
ylab="Índice", xlab="", at="pretty")
addLegend("topleft", legend.names = c("Pib_min nominal","Pib_ min real"),
col= c("red", "blue"), lty=c(1,1), lwd=c(2,2) )}
plot(as.xts(pib.min.ts[,3],format= "%b-%Y" ),
grid.ticks.on = "years", grid.ticks.lwd = 0,
lend = 1, up.col=NULL, dn.col = NULL, grid.col = "gray",
yaxis.left = T, yaxis.right = F, labels.col = "#333333",
format.labels = T, grid2 = "#F5F5F5", bty="n", type = "l",
col= c("blue", "red"), main = "Precio del cobre",
ylab="Índice", xlab="", at="pretty")
## Tasa de crecimiento interanual
rate_4<-matrix(0, nrow = length(pib.min.ts[,1])-4,
ncol=dim(pib.min.ts)[2])
rate_4<-diff(pib.min.ts,lag=4)/lag(pib.min.ts,-4)*100
colnames(rate_4)<-c("Pib.min.real","Pib.min.nominal","Precio cobre")
rate_4
par(mfrow=c(1,1))
{plot(as.xts(rate_4,format= "%b-%Y" ),
grid.ticks.on = "years", grid.ticks.lwd = 0,
lend = 1, up.col=NULL, dn.col = NULL, grid.col = "gray",
yaxis.left = T, yaxis.right = F, labels.col = "#333333",
format.labels = T, grid2 = "#F5F5F5", bty="n", type = "l",
col= c("red","blue", "green"), main = "PIB Minero var interanual",
ylab="Índice", xlab="", at="pretty")
addLegend("bottomleft",
legend.names = c("Pib_min real","Pib_ min nom",
"Precio cobre"),
col= c("red", "blue", "green"), lty=c(1,1,1), lwd=c(2,2,2) )}
install.packages("formattable")
install.packages("forecast")
install.packages("readxl")
install.packages("xts")
### ISUP
rm(list = ls())
get wd()
setwd("C:/Users/Juan Cortez/Documents/Taller econometría aplicada/Econometría Aplicada UTEM/Econometría Aplicada 1sem 2021/Clases/Clase 3")
isup<-read.table("ISUP.txt", header = FALSE)
install.packages("formattable")
library(formattable)
isup<-formattable(isup, digits=15, format = "formatC")
names(isup)<-c("año", "mes", "isup")
isup
head(isup)
tail(isup)
isup.ts<-ts(isup[3], start = c(1991,1),frequency = 12)
plot(isup.ts)
plot(isup.ts, bty="n", ylab="Índice", xlab="año", lwd=1,
type="l", main="Índice de Supermercados", col="blue")
legend("bottomright", legend = "Isup", lwd=2,
col="blue", bty = "n", text.font = 2)
install.packages("forecast")
library(forecast)
ggseasonplot(window(isup.ts, start=c(2000,1),end=c(2019,12)),
year.labels = F, ylab="Índice",
continuous = T, main="Isup por año", cex.main=1 )
seasonplot(isup.ts)
ggsubseriesplot(window(isup.ts, start=c(2000,1),end=c(2019,12)),
year.labels = F, ylab="Índice",
continuous = T, main="Isup por año", cex.main=1)
#cargar archivos excel
install.packages("readxl")
library(readxl)
data<-read_excel("IMACEC.xlsx",sheet = "Hoja1", col_types = "numeric")
head(data)
imacec.ts<-ts(data[2], start = c(2014,1), frequency=12)
plot(imacec.ts, col="blue")
install.packages("xts")
library(xts)
imacec.ts2 <- as.xts(window(imacec.ts, start=c(2017,1),
end=c(2018,9)), format= "%b-%Y")
plot(imacec.ts2, grid.ticks.on = "years", grid.ticks.lwd = 0,
lend = 1, up.col=NULL, dn.col = NULL, grid.col = "gray",
yaxis.left = T, yaxis.right = F, labels.col = "#333333",
format.labels = T, grid2 = "#F5F5F5", bty="n", type = "h",
col= "blue", main = "IMACEC: Tasa de crecimiento interanual",
ylab="Índice", xlab="", at="pretty")
pib.min<-read_excel("PIB minero base2003.xlsx",sheet = "pibmin",
col_types = "numeric")
head(pib.min)
pib.min.ts<-ts(pib.min[,2:4], start = c(2003,1), frequency=4)
par(mfrow=c(1,2))
{plot(as.xts(pib.min.ts[,1:2],format= "%b-%Y" ),
grid.ticks.on = "years", grid.ticks.lwd = 0,
lend = 1, up.col=NULL, dn.col = NULL, grid.col = "gray",
yaxis.left = T, yaxis.right = F, labels.col = "#333333",
format.labels = T, grid2 = "#F5F5F5", bty="n", type = "l",
col= c("blue", "red"), main = "PIB Minero nominal vs real",
ylab="Índice", xlab="", at="pretty")
addLegend("topleft", legend.names = c("Pib_min nominal","Pib_ min real"),
col= c("red", "blue"), lty=c(1,1), lwd=c(2,2) )}
plot(as.xts(pib.min.ts[,3],format= "%b-%Y" ),
grid.ticks.on = "years", grid.ticks.lwd = 0,
lend = 1, up.col=NULL, dn.col = NULL, grid.col = "gray",
yaxis.left = T, yaxis.right = F, labels.col = "#333333",
format.labels = T, grid2 = "#F5F5F5", bty="n", type = "l",
col= c("blue", "red"), main = "Precio del cobre",
ylab="Índice", xlab="", at="pretty")
## Tasa de crecimiento interanual
rate_4<-matrix(0, nrow = length(pib.min.ts[,1])-4,
ncol=dim(pib.min.ts)[2])
rate_4<-diff(pib.min.ts,lag=4)/lag(pib.min.ts,-4)*100
colnames(rate_4)<-c("Pib.min.real","Pib.min.nominal","Precio cobre")
rate_4
par(mfrow=c(1,1))
{plot(as.xts(rate_4,format= "%b-%Y" ),
grid.ticks.on = "years", grid.ticks.lwd = 0,
lend = 1, up.col=NULL, dn.col = NULL, grid.col = "gray",
yaxis.left = T, yaxis.right = F, labels.col = "#333333",
format.labels = T, grid2 = "#F5F5F5", bty="n", type = "l",
col= c("red","blue", "green"), main = "PIB Minero var interanual",
ylab="Índice", xlab="", at="pretty")
addLegend("bottomleft",
legend.names = c("Pib_min real","Pib_ min nom",
"Precio cobre"),
col= c("red", "blue", "green"), lty=c(1,1,1), lwd=c(2,2,2) )}|
install.packages("xts")
5+2
q
()q
q()
names(poker_vecto)<-days_vector
# poker and roulette winnings from Monday to Friday:
poker_vector<-c(140, -50, 20, -120, 240)
roulette_vector<-c(-24, -50, 100. -350, 10)
days_vector<-c("Monday","Tuesday", "Wednesday" ,"Thursday", "Friday")
names(poker_vecto)<-days_vector
# poker and roulette winnings from Monday to Friday:
poker_vector<-c(140, -50, 20, -120, 240)
names(roulette_vector)<-days_vector
ibrary(tidyverse)
library(ggplot2)
library(normtest)
library(lmtest)
mtcars
str(mtcars)
Data.mtcars<-read.table("mtcars.txt",header=TRUE,sep="")
####Punto1####
MTCARS<-data.frame(Data.mtcars)
####Punto1####
MTCARS<-data.frame(Data.mtcars)
# poker and roulette winnings from Monday to Friday:
poker_vector<-c(140, -50, 20, -120, 240)
roulette_vector<-c(-24, -50, 100,-350, 10)
days_vector<-c("Monday","Tuesday", "Wednesday" ,"Thursday", "Friday")
names(poker_vecto)<-days_vector
names(poker_vector)<-days_vector
names(roulette_vector)<-days_vector
# poker and roulette winnings from Monday to Friday:
poker_vector<-c(140, -50, 20, -120, 240)
roulette_vector<-c(-24, -50, 100,-350, 10)
days_vector<-c("Monday","Tuesday", "Wednesday" ,"Thursday", "Friday")
names(poker_vector)<-days_vector
names(roulette_vector)<-days_vector
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
SUM 5+"SEIS"
SUM 5+"SEIS"suma<-5+6
suma<-5+6
suma2<-as.numeric("6")
suma2<-5+
as.numeric("6")
suma2<-5+as.numeric("6")
install.packages("dslabs")
library(dslabs)
data("movielens")
install.packages("dslabs")
install.packages("dslabs")
library(dslabs)
data("movielens")
data("movielens")
force(movielens)
View(movielens)
clean
var <- 0
if(var == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("var es cero, por ende no es ni par, ni impar")
}else if(var %% 2 == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("Este valor es par")
}else{
# aquí va todo lo que queramos hacer cuando la condición no se cumple
print("Este valor es impar")
}
if(var == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("var es cero, por ende no es ni par, ni impar")
}else if(var %% 2 == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("Este valor es par")
}else{
# aquí va todo lo que queramos hacer cuando la condición no se cumple
print("Este valor es impar")
}
if(var %% 2 == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("var es cero, por ende no es ni par, ni impar")
}else if(var == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("Este valor es par")
}else{
# aquí va todo lo que queramos hacer cuando la condición no se cumple
print("Este valor es impar")
}
if(var == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("var es cero, por ende no es ni par, ni impar")
}else if(var %% 2 == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("Este valor es par")
}else{
# aquí va todo lo que queramos hacer cuando la condición no se cumple
print("Este valor es impar")
}
# ¿ Qué pasaría si doy vuelta las condiciones en los if?
# Ejemplo:
var <- 0
if(var %% 2 == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("var es cero, por ende no es ni par, ni impar")
}else if(var == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("Este valor es par")
}else{
# aquí va todo lo que queramos hacer cuando la condición no se cumple
print("Este valor es impar")
}
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# ¿ Porque pasa lo que pasa ?
# aquí va todo lo que queramos hacer cuando la condición es positiva
print(Este valor es par")
}else if(var == 0){
# aquí va todo lo que queramos hacer cuando la condición es positiva
print("var es cero, por ende no es ni par, ni impar")
}else{
# aquí va todo lo que queramos hacer cuando la condición no se cumple
print("Este valor es impar")
}
# ¿ Porque pasa lo que pasa ?
clera
clearPushBack()
BitCoinHistorical <- BitCoinHistorical[BitCoinHistorical$Open!="NaN",]
[11:42] Felipe Ignacio Aspee Enero
sapply(BitCoinHistorical, function(BitCoinHistorical) sum(is.na(BitCoinHistorical)))
source('~/GitHub/Trabajo-uno/DesarrolloPreguntas.R')
source('~/GitHub/Trabajo-uno/DesarrolloPreguntas.R')
source('~/GitHub/Trabajo-uno/DesarrolloPreguntas.R')
### Ejercicio 1 ###
set.seed(10)
sample(c("SI","NO"), 10, replace = T)
SI<- "votosSI"
NO<- "votosNO"
votosSI<- "SI"
votosNO<- "NO"
votosSI
Conj(c("votosSI"))
"SI"<- 0
"NO"<- 1
set.seed(10)
sample(c("SI","NO"), 10, replace = T)
"SI"<- 0
"NO"<- 1
library(data.table)
library(ggplot2)
library(ggplot2)
library(glue)
install.packages("ggplot2")
library(tools, lib.loc = "C:/Program Files/R/R-4.0.5/library")
install.packages("tool")
"C"<- Vectorize(c("SI","NO"), 10, replace = T)
"C"<- Vectorize(c("SI","NO"), 10, replace = 0)
"C"<- Vectorize(c(0,1), 10, replace = 0)
sample(c("A,"R"), 10, replace = T)
set.seed(10)
sample(c("SI","NO"), 10, replace = T)
"SI"<- 0
"NO"<- 1
names(isup)<-c("año", "mes", "isup"
votosSI>votosNO
votosNO>votosSI
QUÓRUM<- if ("SI"==50%+1)
quorum<- if (votosSI== 5+1){ganan el si
quorum<- if votosSI,==5+1{ganan el si}
quorum<- if votosSI ==5+1{ganan el SI}
set.seed(10)
sample(c("SI","NO"), 10, replace = T)
votosSI<- "SI"
votosNO<- "NO"
quorum<- if votosSI ==5+1{ganan el SI}
qorum<- if votosSI == 51% {ganan el SI}
qorum<- if votosSI== 51% {ganan el SI}
qorum<- if (votosSI>= 51%) {ganan SI}
if (votosSI >= 51%){ gana Si}
if (votosSI >= 51+1){ gana Si}
setwd("C:\Users\USUARIO\Documents\GitHub\Trabajo-uno")
setwd("~\GitHub\Trabajo-uno")
set.seed(10)
sample(c("SI","NO"), 10, replace = T)
votosSI<- "SI"
votosNO<- "NO"
install.packages("tidyverse")
library(tidyverse)
setwd("~/GitHub/Trabajo-Uno")
rm(list = ls())
# Funcion votaciones, recibe los parametros total; votosSI; votosNO, con la condicion de que votosSI + votosNO = total, debido al supuesto de que no hay votos blancos ni nulos
votaciones <- function(total,votosSI,votosNO){
if (votosSI >= ((total/2)+1)) {
print("Ha ganado el SI")
} else{
print("votosSI no tiene Quorum")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de Quorum")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Ha ganado el SI")
} else{
if (votosNO >= ((total/2)+1)) {
print("Ha ganado el NO")
} else{
print("votosNO tiene un 30% de Quorum")
if (votosSI == votosNO) {
print("Los Quorums son identicos, ha ganado el NO debido al empate")
} else{
if (votosSI > votosNO) {
print("Ha ganado el SI")
} else{
print("Ha ganado el NO")
}
}
}
}
} else{
print("Ha ganado el NO")
}
}
}
# Funcion votaciones, recibe los parametros total; votosSI; votosNO, con la condicion de que votosSI + votosNO = total, debido al supuesto de que no hay votos blancos ni nulos
votaciones <- function(total,votosSI,votosNO){
if (votosSI >= ((total/2)+1)) {
print("Ha ganado el SI")
} else{
print("votosSI no tiene Quorum")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de Quorum")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Ha ganado el SI")
} else{
if (votosNO >= ((total/2)+1)) {
print("Ha ganado el NO")
} else{
print("votosNO tiene un 30% de Quorum")
if (votosSI == votosNO) {
print("Los Quorums son identicos, ha ganado el NO debido al empate")
} else{
if (votosSI > votosNO) {
print("Ha ganado el SI")
} else{
print("Ha ganado el NO")
}
}
}
}
} else{
print("Ha ganado el NO")
}
}
}
# Ejecuta la funcion, recibe los parametros total; votosSI; votosNO.
votaciones(10,6,4)
# Funcion votaciones_solo_total, recibe solamente el parametro "total" de votos, los votosSi y votosNO se calculan a traves de una seed de aleatoriedad dada por el total de votos (ejemplo: set.seed(total))
votaciones_solo_total <- function(total){
set.seed(total)
padron <- sample(c("SI","NO"),total,replace = TRUE)
padron <- as.data.frame(padron)
names(padron) <- c("votos")
votosSI <- sum(with(padron,votos == "SI"))
votosNO <- sum(with(padron,votos == "NO"))
if (votosSI >= ((total/2)+1)) {
print("Ha ganado el SI")
} else{
print("votosSI no tiene Quorum")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de Quorum")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Ha ganado el SI")
} else{
if (votosNO >= ((total/2)+1)) {
print("Ha ganado el NO")
} else{
print("votosNO tiene un 30% de Quorum")
if (votosSI == votosNO) {
print("Los Quorums son identicos, ha ganado el NO debido al empate")
} else{
if (votosSI > votosNO) {
print("Ha ganado el SI")
} else{
print("Ha ganado el NO")
}
}
}
}
} else{
print("Ha ganado el NO")
}
}
}
# Ejecuta la funcion, solo hay que ingresar el total de votos, 10 por defecto segun el enunciado.
votaciones_solo_total(10)
# Limpia las variables almacenadas
rm(list = ls())
datos_judiciales <- list(c("mp","Juan","Christofer"),
c("of","av01","ampr"),
c("of","av01","ante"),
c("of","av08","arme"),
c("of","av02","ante"),
c("of","av07","ampr"),
c("of","av03","dape"),
c("of","av01","meca"),
c("of","av02","dape"),
c("mp","Antonia"),
c("mp","Christian","Mario"),
c("mp","Jose","Pedro","Antonela"),
c("of","av05","meca"),
c("of","av04","dape"),
c("of","av02","arme"))
# Ejecuta la funcion, solo recibe el parametro datos judiciales
contar_mp(datos_judiciales)
# Funcion contar_mp, recibe el parametro "datos_judiciales" el cual es la base de datos de la clasificacion de datos judiciales, deben tener el mismo formato que la lista de arriba.
contar_mp <- function(datos_judiciales){
ninios <- c()
contador <- list()
estadistica <- list()
for (i in datos_judiciales) {
if (i[1] == "mp") {
contador <- length(i[-1])
ninios <- c(ninios,unlist(contador))
}
}
unicos <- unique(ninios)
for (contador_ninios in unicos) {
estadistica[length(estadistica)+1] <- unlist(contador_ninios)
}
nueva_estadistica<- estadistica
for (equis in 1:length(unicos)) {
nueva_estadistica <- c(estadistica[[equis]][1], length(ninios[ninios == unicos[equis]]))
print(paste("Se cuentan con",nueva_estadistica[2], "mp de",nueva_estadistica[1], "niños"))
}
}
# Ejecuta la funcion, solo recibe el parametro datos judiciales
contar_mp(datos_judiciales)
